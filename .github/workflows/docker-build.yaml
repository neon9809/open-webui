name: Docker Build and Release

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_build: ${{ steps.get_version.outputs.should_build }}
    steps:
      - name: Extract version from commit message or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            VERSION=$(echo "$COMMIT_MSG" | grep -oP 'v\d+\.\d+\.\d+' | head -1 || echo "")
            if [ -n "$VERSION" ]; then
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          if [ -z "$VERSION" ]; then
            VERSION="dev-$(date +%Y%m%d-%H%M%S)"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

  build-and-push:
    needs: extract-version
    if: needs.extract-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.extract-version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=WebUI Application
            org.opencontainers.image.version=${{ needs.extract-version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_HASH=${{ github.sha }}
            USE_CUDA=false
            USE_OLLAMA=false
            USE_SLIM=false
            USE_EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
            USE_RERANKING_MODEL=
            USE_TIKTOKEN_ENCODING_NAME=cl100k_base
            UID=0
            GID=0
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: [extract-version, build-and-push]
    if: needs.extract-version.outputs.should_build == 'true' && startsWith(needs.extract-version.outputs.version, 'v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read changelog
        id: changelog
        run: |
          if [ -f "changelog.md" ] || [ -f "CHANGELOG.md" ] || [ -f "Changelog.md" ]; then
            CHANGELOG_FILE=$(find . -maxdepth 1 -iname "changelog.md" | head -1)
            if [ -n "$CHANGELOG_FILE" ]; then
              # Read the changelog and escape for GitHub Actions
              CHANGELOG_CONTENT=$(cat "$CHANGELOG_FILE")
              # Use a here document to handle multi-line content properly
              {
                echo 'CHANGELOG<<EOF'
                cat "$CHANGELOG_FILE"
                echo EOF
              } >> $GITHUB_OUTPUT
            else
              echo "CHANGELOG=" >> $GITHUB_OUTPUT
            fi
          else
            echo "CHANGELOG=" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.extract-version.outputs.version }}
          release_name: Release ${{ needs.extract-version.outputs.version }}
          body: |
            ## Release ${{ needs.extract-version.outputs.version }}
            
            🐳 **Docker Image**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.extract-version.outputs.version }}`
            
            ### Supported Architectures
            - `linux/amd64`
            - `linux/arm64`
            
            ### Installation
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.extract-version.outputs.version }}
            ```
            
            ### Changes
            ${{ steps.changelog.outputs.CHANGELOG || 'See commit history for detailed changes.' }}
            
            ---
            **Full Changelog**: [${{ github.event.before }}...${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }})
          draft: false
          prerelease: ${{ contains(needs.extract-version.outputs.version, 'alpha') || contains(needs.extract-version.outputs.version, 'beta') || contains(needs.extract-version.outputs.version, 'rc') }}

  notify-completion:
    needs: [extract-version, build-and-push, create-release]
    if: always() && needs.extract-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## 🚀 Build Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.extract-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.extract-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ needs.build-and-push.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "**Release**: ✅ Created" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.create-release.result }}" = "skipped" ]; then
            echo "**Release**: ⏭️ Skipped (not a version tag)" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Release**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
